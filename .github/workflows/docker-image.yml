- name: Deploy over SSH (password auth)
  uses: appleboy/ssh-action@v1.0.3
  with:
    host:     ${{ secrets.SSH_HOST }}
    username: ${{ secrets.SSH_USER }}
    password: ${{ secrets.SSH_PASSWORD }}
    port:     ${{ secrets.SSH_PORT || 22 }}
    # IMPORTANT: don't stop on non-zero from condition lines
    script_stop: false
    script: |
      set -euo pipefail
      set -x

      REPO_URL="${{ secrets.REPO_URL }}"
      WORK_DIR="${{ secrets.WORK_DIR }}"
      BRANCH="${{ secrets.MAIN_BRANCH || '' }}"
      : "${BRANCH:=main}"

      REPO_NAME="my-cv-page"
      REPO_DIR="$WORK_DIR/$REPO_NAME"

      if command -v apt-get >/dev/null 2>&1; then
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y git curl nginx || true

        # Safe docker presence check
        DOCKER_OK=0; docker --version >/dev/null 2>&1 || DOCKER_OK=$?
        if [ "$DOCKER_OK" -ne 0 ]; then
          apt-get install -y docker.io || true
          systemctl enable --now docker || true
        else
          systemctl enable docker || true
          systemctl start docker || true
        fi

        # Clean nginx broken site links & finish half-configured package
        find -L /etc/nginx/sites-enabled -type l -delete || true
        rm -f /etc/nginx/sites-enabled/default || true
        dpkg --configure -a || true
        apt-get -f install -y || true

        systemctl enable nginx || true
        systemctl start nginx || true
      fi

      mkdir -p "$WORK_DIR"; chown -R "$USER:$USER" "$WORK_DIR"

      # Clone or update
      if [ -d "$REPO_DIR/.git" ]; then
        cd "$REPO_DIR"
        git fetch --all --prune
        git checkout "$BRANCH" || git checkout -B "$BRANCH"
        git reset --hard "origin/$BRANCH"
      else
        if [ -e "$REPO_DIR" ] && [ -n "$(ls -A "$REPO_DIR" 2>/dev/null || true)" ]; then
          echo "ERROR: $REPO_DIR exists and isn't a git repo." >&2
          exit 1
        fi
        rm -rf "$REPO_DIR"
        git clone --branch "$BRANCH" --single-branch "$REPO_URL" "$REPO_DIR"
        cd "$REPO_DIR"
      fi

      # Build & run
      IMAGE_NAME="my-cv-page"
      CONTAINER_NAME="my-cv-page"
      HOST_PORT="3000"     # host -> container:80

      docker build -t "$IMAGE_NAME:latest" .

      if docker ps -aq -f "name=^${CONTAINER_NAME}$" | grep -q .; then
        docker rm -f "$CONTAINER_NAME" || true
      fi

      docker run -d --name "$CONTAINER_NAME" --restart unless-stopped \
        -p "${HOST_PORT}:80" \
        "$IMAGE_NAME:latest"

      # Health
      for i in $(seq 1 45); do
        if curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null; then
          echo "App is up on :${HOST_PORT}"
          break
        fi
        sleep 1
      done
      curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null || (docker logs --tail=200 "$CONTAINER_NAME" || true; exit 1)

      # Nginx from repo file (first-run TLS safe)
      DOMAIN="vytautasvilkas.lt"
      mkdir -p /var/www/certbot
      if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
        cat >/etc/nginx/sites-available/${DOMAIN}.conf <<'HTTPONLY'
        server {
          listen 80;
          listen [::]:80;
          server_name vytautasvilkas.lt www.vytautasvilkas.lt;
          location /.well-known/acme-challenge/ { root /var/www/certbot; }
          return 301 https://$host$request_uri;
        }
        HTTPONLY
                ln -sf /etc/nginx/sites-available/${DOMAIN}.conf /etc/nginx/sites-enabled/${DOMAIN}.conf
                nginx -t && (systemctl reload nginx || service nginx reload)

                if ! command -v certbot >/dev/null 2>&1; then
                  apt-get install -y certbot || true
                fi
                EMAIL="admin@vytautasvilkas.lt"
                certbot certonly --agree-tos --no-eff-email -m "$EMAIL" \
                  -d "$DOMAIN" -d "www.$DOMAIN" \
                  --webroot -w /var/www/certbot --non-interactive || true
              fi

              install -m 644 "$REPO_DIR/nginx.conf" "/etc/nginx/sites-available/${DOMAIN}.conf"
              ln -sf "/etc/nginx/sites-available/${DOMAIN}.conf" "/etc/nginx/sites-enabled/${DOMAIN}.conf"
              nginx -t && (systemctl reload nginx || service nginx reload)

              # Renew quietly on subsequent runs
              if command -v certbot >/dev/null 2>&1; then
                certbot renew --quiet || true
              fi

              docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

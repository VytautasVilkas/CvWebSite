name: Deploy (sshpass)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Pull + Deploy over SSH (password)
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash -lc '
              set -euo pipefail
              set -x

              # --- config from secrets ---
              REPO_URL="${{ secrets.REPO_URL }}"
              WORK_DIR="${{ secrets.WORK_DIR }}"         # e.g. /root/CvWebSite (repo root with .git)
              BRANCH="${{ secrets.MAIN_BRANCH }}"
              : "${BRANCH:=main}"

              REPO_ROOT="$WORK_DIR"
              APP_DIR="$WORK_DIR/my-cv-page"             # subfolder with Dockerfile + nginx.conf
              DOMAIN="vytautasvilkas.lt"
              EMAIL="admin@vytautasvilkas.lt"

              # --- packages / services ---
              if command -v apt-get >/dev/null 2>&1; then
                export DEBIAN_FRONTEND=noninteractive
                sudo apt-get update
                sudo apt-get install -y git curl nginx certbot docker.io || true
                sudo systemctl enable --now docker || true
                sudo systemctl enable --now nginx  || true
              fi

              # --- repo update at root (where .git lives) ---
              sudo mkdir -p "$REPO_ROOT"
              sudo chown -R "$USER:$USER" "$REPO_ROOT"
              if [ -d "$REPO_ROOT/.git" ]; then
                cd "$REPO_ROOT"
                git fetch --all --prune
                git checkout "$BRANCH" || git checkout -B "$BRANCH"
                git reset --hard "origin/$BRANCH"
              else
                mkdir -p "$REPO_ROOT"
                cd "$REPO_ROOT"
                if ! git rev-parse --git-dir >/dev/null 2>&1; then
                  git init
                  git remote remove origin >/dev/null 2>&1 || true
                  git remote add origin "$REPO_URL"
                fi
                git fetch --depth=1 origin "$BRANCH"
                git checkout -B "$BRANCH" "origin/$BRANCH" || git checkout -B "$BRANCH"
                git reset --hard "origin/$BRANCH"
                git clean -fdx || true
              fi

              # --- first-run certs (standalone on :80) ---
              if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
                sudo systemctl stop nginx || true
                sudo certbot certonly --standalone --preferred-challenges http \
                  --agree-tos --no-eff-email -m "$EMAIL" \
                  -d "$DOMAIN" -d "www.$DOMAIN" --non-interactive || true
                sudo systemctl start nginx || true
              else
                sudo certbot renew --quiet || true
              fi

              # --- install your repo vhost from file ---
              sudo mkdir -p /var/www/certbot
              sudo find -L /etc/nginx/sites-enabled -type l -delete || true
              sudo rm -f /etc/nginx/sites-enabled/default || true
              sudo install -m 644 "$APP_DIR/nginx.conf" "/etc/nginx/sites-available/${DOMAIN}.conf"
              sudo ln -sf "/etc/nginx/sites-available/${DOMAIN}.conf" "/etc/nginx/sites-enabled/${DOMAIN}.conf"
              sudo nginx -t
              sudo systemctl reload nginx || sudo service nginx reload

              # --- build & run container from subfolder ---
              cd "$APP_DIR"
              IMAGE_NAME="my-cv-page"
              CONTAINER_NAME="my-cv-page"
              HOST_PORT="3000"   # host -> container:80

              sudo docker build --pull -t "$IMAGE_NAME:latest" .

              if sudo docker ps -aq -f "name=^${CONTAINER_NAME}$" | grep -q .; then
                sudo docker rm -f "$CONTAINER_NAME" || true
              fi

              sudo docker run -d --name "$CONTAINER_NAME" --restart unless-stopped \
                -p "${HOST_PORT}:80" \
                "$IMAGE_NAME:latest"

              # --- health check ---
              for i in $(seq 1 45); do
                if curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null; then
                  echo "App is up on :${HOST_PORT}"
                  break
                fi
                sleep 1
              done
              curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null || (sudo docker logs --tail=200 "$CONTAINER_NAME" || true; exit 1)

              sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            '

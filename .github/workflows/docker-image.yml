- name: Deploy 
  uses: appleboy/ssh-action@v1.0.3
  with:
    host:     ${{ secrets.SSH_HOST }}
    username: ${{ secrets.SSH_USER }}
    password: ${{ secrets.SSH_PASSWORD }}
    port:     ${{ secrets.SSH_PORT || 22 }}
    script_stop: false
    script: |
      set -euo pipefail
      set -x

      REPO_URL="${{ secrets.REPO_URL }}"    
      WORK_DIR="${{ secrets.WORK_DIR }}"    
      BRANCH="${{ secrets.MAIN_BRANCH || '' }}"
      : "${BRANCH:=main}"

      REPO_ROOT="$WORK_DIR"                  
      APP_DIR="$WORK_DIR/my-cv-page"         
      DOMAIN="vytautasvilkas.lt"
      EMAIL="admin@vytautasvilkas.lt"

      if command -v apt-get >/dev/null 2>&1; then
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y git curl nginx certbot || true

        # Safe docker presence check
        DOCKER_OK=0; docker --version >/dev/null 2>&1 || DOCKER_OK=$?
        if [ "$DOCKER_OK" -ne 0 ]; then
          apt-get install -y docker.io || true
          systemctl enable --now docker || true
        else
          systemctl enable docker || true
          systemctl start docker || true
        fi

        # clean nginx site links to avoid broken includes
        find -L /etc/nginx/sites-enabled -type l -delete || true
        rm -f /etc/nginx/sites-enabled/default || true
        dpkg --configure -a || true
        apt-get -f install -y || true

        systemctl enable nginx || true
        systemctl start nginx || true
      fi

      mkdir -p "$REPO_ROOT"
      chown -R "$USER:$USER" "$REPO_ROOT"

      # --- clone/update at REPO_ROOT (where .git lives) ---
      if [ -d "$REPO_ROOT/.git" ]; then
        cd "$REPO_ROOT"
        git fetch --all --prune
        git checkout "$BRANCH" || git checkout -B "$BRANCH"
        git reset --hard "origin/$BRANCH"
      else
        # adopt folder or clone fresh
        mkdir -p "$REPO_ROOT"
        cd "$REPO_ROOT"
        if ! git rev-parse --git-dir >/dev/null 2>&1; then
          git init
          git remote remove origin >/dev/null 2>&1 || true
          git remote add origin "$REPO_URL"
        fi
        git fetch --depth=1 origin "$BRANCH"
        git checkout -B "$BRANCH" "origin/$BRANCH" || git checkout -B "$BRANCH"
        git reset --hard "origin/$BRANCH"
        git clean -fdx || true
      fi

      # --- certs first (standalone on :80) ---
      if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
        systemctl stop nginx || true
        certbot certonly --standalone --preferred-challenges http \
          --agree-tos --no-eff-email -m "$EMAIL" \
          -d "$DOMAIN" -d "www.$DOMAIN" --non-interactive || true
        systemctl start nginx || true
      else
        certbot renew --quiet || true
      fi

      # --- install your nginx vhost from the subfolder file ---
      mkdir -p /var/www/certbot
      install -m 644 "$APP_DIR/nginx.conf" "/etc/nginx/sites-available/${DOMAIN}.conf"
      ln -sf "/etc/nginx/sites-available/${DOMAIN}.conf" "/etc/nginx/sites-enabled/${DOMAIN}.conf"
      nginx -t && (systemctl reload nginx || service nginx reload)

      # --- build & run from the subfolder (Dockerfile is here) ---
      cd "$APP_DIR"
      IMAGE_NAME="my-cv-page"
      CONTAINER_NAME="my-cv-page"
      HOST_PORT="3000"   # host -> container:80

      docker build --pull -t "$IMAGE_NAME:latest" .

      if docker ps -aq -f "name=^${CONTAINER_NAME}$" | grep -q .; then
        docker rm -f "$CONTAINER_NAME" || true
      fi

      docker run -d --name "$CONTAINER_NAME" --restart unless-stopped \
        -p "${HOST_PORT}:80" \
        "$IMAGE_NAME:latest"

      # health check
      for i in $(seq 1 45); do
        if curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null; then
          echo "App is up on :${HOST_PORT}"
          break
        fi
        sleep 1
      done
      curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null || (docker logs --tail=200 "$CONTAINER_NAME" || true; exit 1)

      docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'


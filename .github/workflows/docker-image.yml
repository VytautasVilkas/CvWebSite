name: Deploy
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          envs: REPO_URL,WORK_DIR,MAIN_BRANCH
          script: |
            set -euo pipefail
            set -x

            REPO_URL="${{ secrets.REPO_URL }}"
            WORK_DIR="${{ secrets.WORK_DIR }}"
            BRANCH="${{ secrets.MAIN_BRANCH }}"

            REPO_NAME="my-cv-page"
            REPO_DIR="$WORK_DIR/$REPO_NAME"

            # 0) Docker present (ignore systemd errors on images without service files)
            if ! command -v docker >/dev/null 2>&1; then
              if command -v apt-get >/dev/null 2>&1; then
                apt-get update && apt-get install -y docker.io || true
                systemctl enable --now docker || true
              fi
            else
              systemctl enable docker || true
              systemctl start docker || true
            fi

            # 1) Ensure parent dir
            mkdir -p "$WORK_DIR"
            chown -R "$USER:$USER" "$WORK_DIR"

            # 2) Clone or update repo into REPO_DIR
            if [ -d "$REPO_DIR/.git" ]; then
              cd "$REPO_DIR"
              git fetch --all --prune
              git checkout "$BRANCH" || git checkout -B "$BRANCH"
              git reset --hard "origin/$BRANCH"
            else
              if [ -e "$REPO_DIR" ] && [ -n "$(ls -A "$REPO_DIR" 2>/dev/null || true)" ]; then
                echo "ERROR: $REPO_DIR exists and is not a git repo. Remove it or use another path." >&2
                exit 1
              fi
              rm -rf "$REPO_DIR"
              git clone --branch "$BRANCH" --single-branch "$REPO_URL" "$REPO_DIR"
              cd "$REPO_DIR"
            fi

            # 3) Build & run container from subfolder with Dockerfile
            cd "$REPO_DIR"
            IMAGE_NAME="my-cv-page"
            CONTAINER_NAME="my-cv-page"
            HOST_PORT="3000"     # host â†’ container:80

            docker build -t "$IMAGE_NAME:latest" .

            if docker ps -aq -f "name=^${CONTAINER_NAME}$" | grep -q .; then
              docker rm -f "$CONTAINER_NAME" || true
            fi

            docker run -d --name "$CONTAINER_NAME" --restart unless-stopped \
              -p "${HOST_PORT}:80" \
              "$IMAGE_NAME:latest"

            # 4) Health wait
            for i in $(seq 1 45); do
              if curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null; then
                echo "App is up on :${HOST_PORT}"
                break
              fi
              sleep 1
            done
            curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null || (docker logs --tail=200 "$CONTAINER_NAME" || true; exit 1)

            # 5) Nginx vhost
            DOMAIN="vytautasvilkas.lt"
            mkdir -p /var/www/certbot
            cat >/etc/nginx/sites-available/${DOMAIN}.conf <<'NGINX'
            server {
              listen 80;
              listen [::]:80;
              server_name vytautasvilkas.lt www.vytautasvilkas.lt;
              location /.well-known/acme-challenge/ { root /var/www/certbot; }
              return 301 https://$host$request_uri;
            }
            server {
              listen 443 ssl http2;
              listen [::]:443 ssl http2;
              server_name vytautasvilkas.lt www.vytautasvilkas.lt;

              ssl_certificate     /etc/letsencrypt/live/vytautasvilkas.lt/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/vytautasvilkas.lt/privkey.pem;

              ssl_session_timeout 1d;
              ssl_session_cache shared:SSL:10m;
              ssl_protocols TLSv1.2 TLSv1.3;

              location / {
                proxy_pass http://127.0.0.1:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }
            }
            NGINX

            ln -sf /etc/nginx/sites-available/${DOMAIN}.conf /etc/nginx/sites-enabled/${DOMAIN}.conf
            nginx -t && (systemctl reload nginx || service nginx reload)

            # 6) Certs
            if ! command -v certbot >/dev/null 2>&1; then
              if command -v apt-get >/dev/null 2>&1; then
                apt-get update && apt-get install -y certbot
              fi
            fi

            if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
              EMAIL="admin@vytautasvilkas.lt"
              certbot certonly --agree-tos --no-eff-email -m "$EMAIL" \
                -d "$DOMAIN" -d "www.$DOMAIN" \
                --webroot -w /var/www/certbot --non-interactive || true
              nginx -t && (systemctl reload nginx || service nginx reload)
            else
              certbot renew --quiet || true
            fi

            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

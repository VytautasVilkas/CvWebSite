name: Deploy (sshpass)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Pull + Deploy over SSH (password)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REPO_URL: ${{ secrets.REPO_URL }}
          WORK_DIR: ${{ secrets.WORK_DIR }}
          MAIN_BRANCH: ${{ secrets.MAIN_BRANCH }}
        run: |
          # Important: export vars INTO the remote shell, then feed the script via heredoc.
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
            "$SSH_USER@$SSH_HOST" "export REPO_URL='$REPO_URL' WORK_DIR='$WORK_DIR' MAIN_BRANCH='${MAIN_BRANCH:-main}'; bash -s" <<'EOSH'
          set -euo pipefail
          set -x

          BRANCH="${MAIN_BRANCH:-main}"

          REPO_ROOT="$WORK_DIR"
          APP_DIR="$WORK_DIR/my-cv-page"
          DOMAIN="vytautasvilkas.lt"
          EMAIL="admin@vytautasvilkas.lt"

          # --- packages / services ---
          if command -v apt-get >/dev/null 2>&1; then
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get update
            sudo apt-get install -y git curl nginx certbot docker.io || true
            sudo systemctl enable --now docker || true
            sudo systemctl enable --now nginx  || true
            # Make sure firewall won't block 80/443 (idempotent)
            sudo ufw allow 'Nginx Full' || true
          fi

          # --- repo update (ALWAYS latest) ---
          sudo mkdir -p "$REPO_ROOT"
          sudo chown -R "$USER:$USER" "$REPO_ROOT"
          if [ -d "$REPO_ROOT/.git" ]; then
            cd "$REPO_ROOT"
            git fetch --all --prune
            git checkout "$BRANCH" || git checkout -B "$BRANCH"
            git reset --hard "origin/$BRANCH"
          else
            mkdir -p "$REPO_ROOT"; cd "$REPO_ROOT"
            git init
            git remote remove origin >/dev/null 2>&1 || true
            git remote add origin "$REPO_URL"
            git fetch --depth=1 origin "$BRANCH"
            git checkout -B "$BRANCH" "origin/$BRANCH"
            git reset --hard "origin/$BRANCH"
            git clean -fdx || true
          fi
          echo "Deployed commit: $(git rev-parse --short HEAD)"

          # --- certificates ---
          if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
            sudo systemctl stop nginx || true
            sudo certbot certonly --standalone --preferred-challenges http \
              --agree-tos --no-eff-email -m "$EMAIL" \
              -d "$DOMAIN" -d "www.$DOMAIN" --non-interactive || true
            sudo systemctl start nginx || true
          else
            sudo certbot renew --quiet || true
          fi

          # --- nginx vhost: EXACT file from repo ---
          sudo mkdir -p /var/www/certbot
          sudo install -m 644 "$APP_DIR/nginx.conf" "/etc/nginx/sites-available/${DOMAIN}.conf"
          sudo ln -sf "/etc/nginx/sites-available/${DOMAIN}.conf" "/etc/nginx/sites-enabled/${DOMAIN}.conf"
          sudo rm -f /etc/nginx/sites-enabled/default || true

          # Remove any other files claiming this domain (prevents conflicts)
          for f in /etc/nginx/sites-enabled/* /etc/nginx/conf.d/*; do
            [ -f "$f" ] || continue
            [ "$f" = "/etc/nginx/sites-enabled/${DOMAIN}.conf" ] && continue
            if grep -qE "server_name\s+(www\.)?${DOMAIN}\b" "$f"; then
              sudo rm -f "$f"
            fi
          done

          sudo nginx -t
          sudo systemctl reload nginx || sudo service nginx reload

          # --- build & run container ---
          cd "$APP_DIR"
          IMAGE_NAME="my-cv-page"
          CONTAINER_NAME="my-cv-page"
          HOST_PORT="3000"   # host -> container:80

          sudo docker build --pull -t "$IMAGE_NAME:latest" .
          sudo docker rm -f "$CONTAINER_NAME" 2>/dev/null || true
          sudo docker run -d --name "$CONTAINER_NAME" --restart unless-stopped \
            -p "${HOST_PORT}:80" "$IMAGE_NAME:latest"

          # --- health checks ---
          for i in $(seq 1 45); do
            if curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null; then
              echo "App is up on :${HOST_PORT}"
              break
            fi
            sleep 1
          done
          curl -fsS "http://127.0.0.1:${HOST_PORT}/" >/dev/null
          curl -k -I -H "Host: $DOMAIN" https://127.0.0.1 || true
          EOSH
